{
  /* 
  * ! Important Note for Contribution
*
   * top level name: name of the snippet (ex: "snippets name"{...}), must start with nextjs  (ex:nextjs RouterLink )
*
  * scope never change,"scope": "typescript,typescriptreact,javascript,javascriptreact",

  * prefix: shortcut that you type in the editor to insert the snippet (start with : nex)

  * body : the actual code that gets inserted into the edito0r when you use the snippet
  
  * description:  short explanation of what the snippet does

 * use the follwing template :

   "snippet name here ": {
    "prefix": "prefixhere",
    "body": ["content here"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "snippets description"
  }

  * TODO: try to categories them : {
     - REACT SNIPPETS WITH IMPORTS
     - REACT SNIPPETS WITHOUT IMPORTS
     - Nextjs  SNIPPETS WITH IMPORTS
     - Nextjs  SNIPPETS WITHOUT IMPORTS
     - OTHERS
   }
  
  */

  "nextjs Page": {
    "prefix": "nexpage",
    "body": [
      "import type { NextPage } from 'next';",
      "import HeadWrapper from '@/components/layout/HeadWrapper';",
      "import Layout from '@/components/layout/Layout';",
      "import NeedLogin from '@/components/layout/NeedLogin';",
      "",
      "const ${1:$TM_FILENAME_BASE}: NextPage = () => {",
      "  return (",
      "    <HeadWrapper>",
      "      <NeedLogin>",
      "        <Layout>",
      "          <main></main>",
      "        </Layout>",
      "      </NeedLogin>",
      "    </HeadWrapper>",
      "  );",
      "};",
      "",
      "export default ${1:$TM_FILENAME_BASE};"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "Create a basic Next.js page component."
  },
  "nextjs FunctionComponent": {
    "key": "reactArrowFunctionExportComponent",
    "prefix": "nexrafce",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <div>",
      "      <h1>${1:first}</h1>",
      "    </div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },

  "nextjs ApiRoute": {
    "prefix": "nexapi",
    "body": [
      "import { NextApiRequest, NextApiResponse } from 'next';",
      "",
      "export default function handler(req: NextApiRequest, res: NextApiResponse) {",
      "  res.status(200).json({ message: 'Hello, Next.js!' });",
      "}"
    ],
    "description": "Create a basic Next.js API route."
  },
  "nextjs GetstaticProps": {
    "prefix": "nexgetstaticprops",
    "body": [
      "export async function getStaticProps() {",
      "  return {",
      "    props: {}, // will be passed to the page component as props",
      "  };",
      "}"
    ],
    "description": "Create a getStaticProps function."
  },
  "nextjs GetstaticPaths": {
    "prefix": "nexgetstaticpaths",
    "body": [
      "export async function getStaticPaths() {",
      "  return {",
      "    paths: [],",
      "    fallback: false",
      "  };",
      "}"
    ],
    "description": "Create a getStaticPaths function."
  },
  "nextjs GetserversideProps": {
    "prefix": "nexgetserversideprops",
    "body": [
      "export async function getServerSideProps(context) {",
      "  return {",
      "    props: {}, // will be passed to the page component as props",
      "  };",
      "}"
    ],
    "description": "Create a getServerSideProps function."
  },
  "nextjs Useeffect": {
    "prefix": "nexuseeffect",
    "body": [
      "import { useEffect } from 'react';",
      "",
      "useEffect(() => {",
      "  $1",
      "}, []);"
    ],
    "description": "Basic useEffect hook."
  },
  "nextjs Usecontext": {
    "prefix": "nexusecontext",
    "body": [
      "import { useContext } from 'react';",
      "import { $1Context } from '../context/$1Context';",
      "",
      "const $1 = () => {",
      "  const context = useContext($1Context);",
      "  return <div>{context}</div>;",
      "};"
    ],
    "description": "useContext hook with a custom context."
  },

  "nextjs UseState": {
    "prefix": "nexstate",
    "body": ["const [$1, set$2] = useState($3);"]
  },
  "nextjs UseMemo": {
    "prefix": "nex-useMemo",
    "body": ["useMemo(() => {", "  $1", "}, [$2]);"]
  },
  "NextUseCallback": {
    "prefix": "nexuseCallback",
    "body": ["useCallback(() => {", "  $1", "}, [$2]);"]
  },
  "NextUseRef": {
    "prefix": "nexurf",
    "body": ["const ${1:ref} = useRef(${2:null});"],
    "description": "React useRef Hook"
  },
  "Nextjs ContextAPI": {
    "prefix": "nexcontext",
    "body": [
      "const ${1:Context} = React.createContext(${2:defaultValue});",
      "",
      "export const ${3:Provider} = ({ children }) => {",
      "  const [${4:state}, set${5:State}] = useState(${6:initialState});",
      "",
      "  return (",
      "    <${1:Context}.Provider value={{ ${4:state}, set${5:State} }}>",
      "      {children}",
      "    </${1:Context}.Provider>",
      "  );",
      "};",
      "",
      "export const use${1:Context} = () => useContext(${1:Context});"
    ],
    "description": "React Context API"
  },
  "Nextjs UseReducer": {
    "prefix": "nexur",
    "body": [
      "const [${1:state}, dispatch] = useReducer(${2:reducer}, ${3:initialState});"
    ],
    "description": "React useReducer Hook"
  },
  "NextUseLayoutEffect": {
    "prefix": "nexule",
    "body": [
      "useLayoutEffect(() => {",
      "  ${1:effect};",
      "}, [${2:dependencies}]);"
    ],
    "description": "React useLayoutEffect Hook"
  },
  "nextjs HeadComponent": {
    "prefix": "nexhead",
    "body": [
      "import Head from 'next/head';",
      "",
      "const $1 = () => (",
      "  <Head>",
      "    <title>$2</title>",
      "    <meta name='description' content='$3' />",
      "  </Head>",
      ");",
      "",
      "export default $1;"
    ],
    "description": "Create a Head component for SEO."
  },
  "nextjs LinkComponent": {
    "prefix": "nexlink",
    "body": ["<Link href='$1'>", "  $2", "</Link>"],
    "description": "Create a Link  for Next.js navigation."
  },
  "nextjs ImageComponent": {
    "prefix": "neximage",
    "body": [
      "import Image from 'next/image';",
      "",
      "<Image",
      "  src='$1'",
      "  alt='$2'",
      "  width={$3}",
      "  height={$4}",
      "/>"
    ],
    "description": "Create a Next.js Image component with required props."
  },

  "nextjs AsyncFunctionComponent": {
    "prefix": "nexarafce",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = async () => {",
      "  return (",
      "    <div>",
      "      <h1>${1:first}</h1>",
      "    </div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ]
  },
  "nextjs AsyncFunctionComponentWithProps": {
    "prefix": "nexarafcep",
    "body": [
      "interface $1Props {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = async ({}: $1Props) => {",
      "  return (",
      "    <div>",
      "      <h1>${1:first}</h1>",
      "    </div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ]
  },
  "nextjs Import": {
    "key": "import",
    "prefix": "neximp",
    "body": ["import ${2:second} from '${1:first}'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "nextjs ImportDestructing": {
    "key": "importDestructing",
    "prefix": "neximd",
    "body": ["import { ${2:second} } from '${1:first}'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },

  "nextjs Import All Resources ": {
    "prefix": "nexRes",
    "body": [
      "import Link from 'next/link';",
      "import Image from 'next/image';"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "Import all next.js Resources (Link,Images..."
  },
  "Nextjs ReduxSlice": {
    "key": "reduxSlice",
    "prefix": "nexrxslice",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit'",
      "",
      "const initialState = {",
      "  ${3}",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = createSlice({",
      "  name: '${2:second}',",
      "  initialState,",
      "  reducers: {}",
      "});",
      "",
      "export const {} = ${1:${TM_FILENAME_BASE}}.actions",
      "",
      "export default ${1:${TM_FILENAME_BASE}}.reducer"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "nextjs LazyLoadingComponent": {
    "prefix": "rll",
    "body": [
      "import React, { lazy, Suspense } from 'react';",
      "",
      "const ${1:LazyComponent} = lazy(() => import('${2:./LazyComponent}'));",
      "",
      "const ${3:ComponentName} = () => {",
      "  return (",
      "    <Suspense fallback={<div>Loading...</div>}>",
      "      <${1:LazyComponent} />",
      "    </Suspense>",
      "  );",
      "};",
      "",
      "export default ${3:ComponentName};"
    ],
    "description": "Lazy load a React component"
  },
  "nextjs Suspense": {
    "prefix": "nexrsus",
    "body": [
      "import React, { Suspense } from 'react';",
      "",
      "const ${1:LazyComponent} = React.lazy(() => import('${2:./LazyComponent}'));",
      "",
      "const ${3:ComponentName} = () => {",
      "  return (",
      "    <Suspense fallback={<div>Loading...</div>}>",
      "      <${1:LazyComponent} />",
      "    </Suspense>",
      "  );",
      "};",
      "",
      "export default ${3:ComponentName};"
    ],
    "description": "React Suspense for lazy loading components"
  },
  "nextjs ForwardRef": {
    "prefix": "nexrfr",
    "body": [
      "import React, { forwardRef } from 'react';",
      "",
      "const ${1:ComponentName} = forwardRef((props, ref) => {",
      "  return (",
      "    <div ref={ref}>${2:Component Content}</div>",
      "  );",
      "});",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "React Forward Ref"
  },
  "nextjs UseImperativeHandleHook": {
    "prefix": "uimp",
    "body": [
      "useImperativeHandle(ref, () => ({",
      "  ${1:exposeMethod}: () => {",
      "    ${2:implementation}",
      "  },",
      "}));"
    ],
    "description": "React useImperativeHandle Hook"
  },
  "nextjs RouterLink": {
    "prefix": "nexrrouter",
    "body": [
      "import { Link } from 'react-router-dom';",
      "",
      "const ${1:ComponentName} = () => {",
      "  return (",
      "    <Link to='${2:/path}'>${3:Link Text}</Link>",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "React Router Link Component"
  },
  // others
  "nextjs ListRendering ": {
    "prefix": "nexlist",
    "body": [
      "import React from 'react';",
      "const List = ({ items }) => {",
      "return (",
      " <ul>",
      " {items.map(item => (",
      "<li key={item.id}>{item.name}</li>",
      "  ))}",
      " </ul>",
      " );",
      "};",
      "export default List;"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "Renders items in a list, mostly from an API or database, to be displayed on the user interface."
  },
  "nextjs Custom": {
    "prefix": "nexCutH",
    "body": [
      "import { useState, useEffect } from 'react';",

      "const useFetch = (url) => {",
      "const [data, setData] = useState(null);",
      " const [loading, setLoading] = useState(true);",

      " useEffect(() => {",
      " const fetchData = async () => {",
      "  const response = await fetch(url);",
      "  const data = await response.json();",
      "  setData(data);",
      " setLoading(false);",
      "};",

      " fetchData();",
      "}, [url]);",

      " return { data, loading };",
      "};",

      "export default useFetch;"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": " code that handles forms and input submission."
  },
  "nextjs Form ": {
    "prefix": "nexForm",
    "body": [
      " import React, { useState } from 'react';",

      "const Form = () => {",
      "const [value, setValue] = useState('');",

      " const handleChange = (e) => setValue(e.target.value);",

      " const handleSubmit = (e) => {",
      "  e.preventDefault();",
      " // Handle form submission",
      "};",

      "return (",
      "<form onSubmit={handleSubmit}>",
      "  <input type='text' value={value} onChange={handleChange} />",
      "  <button type='submit'>Submit</button>",
      "  </form>",
      ");",
      "};",

      "export default Form;"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": " Creates a hook for reusing stateful logic."
  },
  "nextjs Modal ": {
    "prefix": "nexModl",
    "body": [
      "import React from 'react';",
      "const Modal = ({ isOpen, onClose, children }) => {",
      " return isOpen ? (",
      " <div className='modal'>",
      "  <div className='modal-content'>",
      "  {children}",
      "   <button onClick={onClose}>Close</button>",
      "  </div>",
      " </div>",
      "  ) : null;",
      "};",
      "",
      "export default Modal;"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": " Creates a hook for reusing stateful logic."
  },
  "nextjs Tab ": {
    "prefix": "nexTab",
    "body": [
      "import React, { useState } from 'react';",
      "",
      "const Tabs = ({ tabs }) => {",
      "const [activeTab, setActiveTab] = useState(0);",
      "",
      " return (",
      "   <div className='tabs'>",
      "  {tabs.map((tab, index) => (",
      "   <div",
      "   key={index}",
      "    className={`tab ${index === activeTab ? 'active' : ''}`}",
      "  onClick={() => setActiveTab(index)}",
      ">",
      "    {tab.title}",
      "   </div>",
      " ))}",
      " <div className='tab-content'>{tabs[activeTab].content}</div>",
      " </div>",
      ");",
      "};",
      "",
      "export default Tabs;"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": " A tab component for switching between different content."
  },
  "nextjs  Image Slider": {
    "prefix": "nexImgSlider",
    "body": [
      "import React, { useState } from 'react';",
      "",
      "const ImageSlider = ({ images }) => {",
      "const [currentIndex, setCurrentIndex] = useState(0);",
      " const nextSlide = () => setCurrentIndex((prevIndex) => ",
      "(prevIndex === images.length - 1 ? 0 : prevIndex + 1));",
      " const prevSlide = () => setCurrentIndex((prevIndex) => (prevIndex === 0 ",
      "images.length - 1 : prevIndex - 1));",
      "",
      " return (",
      " <div className='slider'>",
      "   <button onClick={prevSlide}>Prev</button>",
      "  <img src={images[currentIndex]} alt='Slide' />",
      " <button onClick={nextSlide}>Next</button>",
      " </div>",
      " );",
      "};",
      "",
      "export default ImageSlider;"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": " An image slider for displaying multiple images."
  },
  "nextjs  Button  ": {
    "prefix": "nexButton",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "",
      "const Button = ({ type, className, children, ...props }) => {",
      " return (",
      " <button",
      "  type={type}",
      " className={className}",
      " {...props}",
      " >",
      "  {children}",
      " </button>",
      ");",
      "};",
      "",
      "Button.propTypes = {",
      " type: PropTypes.oneOf(['button', 'submit', 'reset']),",
      " className: PropTypes.string,",
      " children: PropTypes.node.isRequired,",
      "};",
      "",
      "Button.defaultProps = {",
      "type: 'button',",
      "className: '',",
      "};",
      "",
      "export default Button;"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "Reusable button component in React code, ."
  },
  "nextjs  Loading Spinner  ": {
    "prefix": "nexSpinner",
    "body": [
      "import React from 'react';",
      "",
      "const Spinner = ({ size, color }) => {",
      "const spinnerStyle = {",
      "  width: size,",
      " height: size,",
      " borderTopColor: color,",
      " borderLeftColor: 'transparent',",
      " animation: 'spin 1s linear infinite',",
      " borderWidth: '2px',",
      " borderStyle: 'solid',",
      "  borderRadius: '50%',",
      "};",
      "",
      " return (",
      "  <div className='inline-block animate-spin' style={spinnerStyle}></div>",
      ");",
      "};",
      "",
      "Spinner.defaultProps = {",
      " size: '6',",
      " color: 'rgba(59, 130, 246, 1)',",
      "};",
      "",
      "export default Spinner;"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "A reusable loading spinner to simulate a loading effect ."
  },
  "nextjs  Dropdown   ": {
    "prefix": "nexDropdown",
    "body": [
      " import React from 'react';",
      "",
      "const Dropdown = ({ options, onSelect }) => {",
      " return (",
      "  <select onChange={(e) => onSelect(e.target.value)}>",
      "  {options.map((option) => (",
      "   <option key={option.value} value={option.value}>",
      "    {option.label}",
      "  </option>",
      " ))}",
      "</select>",
      ");",
      "};",
      "",
      "export default Dropdown;"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "A reusable loading spinner to simulate a loading effect ."
  }
}
